/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DateiTransfer_types.h"

#include <algorithm>



const char* datenSenden::ascii_fingerprint = "19F6485E473538C6BC4AC5F253CBC1B9";
const uint8_t datenSenden::binary_fingerprint[16] = {0x19,0xF6,0x48,0x5E,0x47,0x35,0x38,0xC6,0xBC,0x4A,0xC5,0xF2,0x53,0xCB,0xC1,0xB9};

uint32_t datenSenden::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->neuePosition);
          this->__isset.neuePosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->paket.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->paket.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->paket[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.paket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t datenSenden::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("datenSenden");

  xfer += oprot->writeFieldBegin("neuePosition", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->neuePosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paket", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->paket.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->paket.begin(); _iter5 != this->paket.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(datenSenden &a, datenSenden &b) {
  using ::std::swap;
  swap(a.neuePosition, b.neuePosition);
  swap(a.paket, b.paket);
  swap(a.__isset, b.__isset);
}

const char* initUploadReturn::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t initUploadReturn::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t initUploadReturn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->neuePosition);
          this->__isset.neuePosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->verbindungsId);
          this->__isset.verbindungsId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t initUploadReturn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("initUploadReturn");

  xfer += oprot->writeFieldBegin("neuePosition", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->neuePosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verbindungsId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->verbindungsId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(initUploadReturn &a, initUploadReturn &b) {
  using ::std::swap;
  swap(a.neuePosition, b.neuePosition);
  swap(a.verbindungsId, b.verbindungsId);
  swap(a.__isset, b.__isset);
}

const char* initDownloadReturn::ascii_fingerprint = "C2C41E587DAC84A77A5056A1DC94ED73";
const uint8_t initDownloadReturn::binary_fingerprint[16] = {0xC2,0xC4,0x1E,0x58,0x7D,0xAC,0x84,0xA7,0x7A,0x50,0x56,0xA1,0xDC,0x94,0xED,0x73};

uint32_t initDownloadReturn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dateiGroese);
          this->__isset.dateiGroese = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->verbindungsId);
          this->__isset.verbindungsId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->neuePosition);
          this->__isset.neuePosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t initDownloadReturn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("initDownloadReturn");

  xfer += oprot->writeFieldBegin("dateiGroese", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dateiGroese);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verbindungsId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->verbindungsId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("neuePosition", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->neuePosition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(initDownloadReturn &a, initDownloadReturn &b) {
  using ::std::swap;
  swap(a.dateiGroese, b.dateiGroese);
  swap(a.verbindungsId, b.verbindungsId);
  swap(a.neuePosition, b.neuePosition);
  swap(a.__isset, b.__isset);
}



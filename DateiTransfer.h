/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DateiTransfer_H
#define DateiTransfer_H

#include <thrift/TDispatchProcessor.h>
#include "DateiTransfer_types.h"



class DateiTransferIf {
 public:
  virtual ~DateiTransferIf() {}
  virtual void initUpload(initUploadReturn& _return, const std::string& dateiname, const int64_t dateigroese) = 0;
  virtual void initDownload(initDownloadReturn& _return, const std::string& dateiname) = 0;
  virtual int32_t checkoutPacketSize(const int32_t verbindungsid, const int32_t paketgroese) = 0;
  virtual int64_t sendPacket(const int32_t verbindungsid, const std::vector<int8_t> & paket, const int64_t neuedateiposition) = 0;
  virtual void receivePacket(datenSenden& _return, const int32_t verbindungsid, const int64_t dateiposition) = 0;
};

class DateiTransferIfFactory {
 public:
  typedef DateiTransferIf Handler;

  virtual ~DateiTransferIfFactory() {}

  virtual DateiTransferIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DateiTransferIf* /* handler */) = 0;
};

class DateiTransferIfSingletonFactory : virtual public DateiTransferIfFactory {
 public:
  DateiTransferIfSingletonFactory(const boost::shared_ptr<DateiTransferIf>& iface) : iface_(iface) {}
  virtual ~DateiTransferIfSingletonFactory() {}

  virtual DateiTransferIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DateiTransferIf* /* handler */) {}

 protected:
  boost::shared_ptr<DateiTransferIf> iface_;
};

class DateiTransferNull : virtual public DateiTransferIf {
 public:
  virtual ~DateiTransferNull() {}
  void initUpload(initUploadReturn& /* _return */, const std::string& /* dateiname */, const int64_t /* dateigroese */) {
    return;
  }
  void initDownload(initDownloadReturn& /* _return */, const std::string& /* dateiname */) {
    return;
  }
  int32_t checkoutPacketSize(const int32_t /* verbindungsid */, const int32_t /* paketgroese */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t sendPacket(const int32_t /* verbindungsid */, const std::vector<int8_t> & /* paket */, const int64_t /* neuedateiposition */) {
    int64_t _return = 0;
    return _return;
  }
  void receivePacket(datenSenden& /* _return */, const int32_t /* verbindungsid */, const int64_t /* dateiposition */) {
    return;
  }
};

typedef struct _DateiTransfer_initUpload_args__isset {
  _DateiTransfer_initUpload_args__isset() : dateiname(false), dateigroese(false) {}
  bool dateiname;
  bool dateigroese;
} _DateiTransfer_initUpload_args__isset;

class DateiTransfer_initUpload_args {
 public:

  DateiTransfer_initUpload_args() : dateiname(), dateigroese(0) {
  }

  virtual ~DateiTransfer_initUpload_args() throw() {}

  std::string dateiname;
  int64_t dateigroese;

  _DateiTransfer_initUpload_args__isset __isset;

  void __set_dateiname(const std::string& val) {
    dateiname = val;
  }

  void __set_dateigroese(const int64_t val) {
    dateigroese = val;
  }

  bool operator == (const DateiTransfer_initUpload_args & rhs) const
  {
    if (!(dateiname == rhs.dateiname))
      return false;
    if (!(dateigroese == rhs.dateigroese))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_initUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_initUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DateiTransfer_initUpload_pargs {
 public:


  virtual ~DateiTransfer_initUpload_pargs() throw() {}

  const std::string* dateiname;
  const int64_t* dateigroese;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_initUpload_result__isset {
  _DateiTransfer_initUpload_result__isset() : success(false) {}
  bool success;
} _DateiTransfer_initUpload_result__isset;

class DateiTransfer_initUpload_result {
 public:

  DateiTransfer_initUpload_result() {
  }

  virtual ~DateiTransfer_initUpload_result() throw() {}

  initUploadReturn success;

  _DateiTransfer_initUpload_result__isset __isset;

  void __set_success(const initUploadReturn& val) {
    success = val;
  }

  bool operator == (const DateiTransfer_initUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_initUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_initUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_initUpload_presult__isset {
  _DateiTransfer_initUpload_presult__isset() : success(false) {}
  bool success;
} _DateiTransfer_initUpload_presult__isset;

class DateiTransfer_initUpload_presult {
 public:


  virtual ~DateiTransfer_initUpload_presult() throw() {}

  initUploadReturn* success;

  _DateiTransfer_initUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DateiTransfer_initDownload_args__isset {
  _DateiTransfer_initDownload_args__isset() : dateiname(false) {}
  bool dateiname;
} _DateiTransfer_initDownload_args__isset;

class DateiTransfer_initDownload_args {
 public:

  DateiTransfer_initDownload_args() : dateiname() {
  }

  virtual ~DateiTransfer_initDownload_args() throw() {}

  std::string dateiname;

  _DateiTransfer_initDownload_args__isset __isset;

  void __set_dateiname(const std::string& val) {
    dateiname = val;
  }

  bool operator == (const DateiTransfer_initDownload_args & rhs) const
  {
    if (!(dateiname == rhs.dateiname))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_initDownload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_initDownload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DateiTransfer_initDownload_pargs {
 public:


  virtual ~DateiTransfer_initDownload_pargs() throw() {}

  const std::string* dateiname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_initDownload_result__isset {
  _DateiTransfer_initDownload_result__isset() : success(false) {}
  bool success;
} _DateiTransfer_initDownload_result__isset;

class DateiTransfer_initDownload_result {
 public:

  DateiTransfer_initDownload_result() {
  }

  virtual ~DateiTransfer_initDownload_result() throw() {}

  initDownloadReturn success;

  _DateiTransfer_initDownload_result__isset __isset;

  void __set_success(const initDownloadReturn& val) {
    success = val;
  }

  bool operator == (const DateiTransfer_initDownload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_initDownload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_initDownload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_initDownload_presult__isset {
  _DateiTransfer_initDownload_presult__isset() : success(false) {}
  bool success;
} _DateiTransfer_initDownload_presult__isset;

class DateiTransfer_initDownload_presult {
 public:


  virtual ~DateiTransfer_initDownload_presult() throw() {}

  initDownloadReturn* success;

  _DateiTransfer_initDownload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DateiTransfer_checkoutPacketSize_args__isset {
  _DateiTransfer_checkoutPacketSize_args__isset() : verbindungsid(false), paketgroese(false) {}
  bool verbindungsid;
  bool paketgroese;
} _DateiTransfer_checkoutPacketSize_args__isset;

class DateiTransfer_checkoutPacketSize_args {
 public:

  DateiTransfer_checkoutPacketSize_args() : verbindungsid(0), paketgroese(0) {
  }

  virtual ~DateiTransfer_checkoutPacketSize_args() throw() {}

  int32_t verbindungsid;
  int32_t paketgroese;

  _DateiTransfer_checkoutPacketSize_args__isset __isset;

  void __set_verbindungsid(const int32_t val) {
    verbindungsid = val;
  }

  void __set_paketgroese(const int32_t val) {
    paketgroese = val;
  }

  bool operator == (const DateiTransfer_checkoutPacketSize_args & rhs) const
  {
    if (!(verbindungsid == rhs.verbindungsid))
      return false;
    if (!(paketgroese == rhs.paketgroese))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_checkoutPacketSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_checkoutPacketSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DateiTransfer_checkoutPacketSize_pargs {
 public:


  virtual ~DateiTransfer_checkoutPacketSize_pargs() throw() {}

  const int32_t* verbindungsid;
  const int32_t* paketgroese;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_checkoutPacketSize_result__isset {
  _DateiTransfer_checkoutPacketSize_result__isset() : success(false) {}
  bool success;
} _DateiTransfer_checkoutPacketSize_result__isset;

class DateiTransfer_checkoutPacketSize_result {
 public:

  DateiTransfer_checkoutPacketSize_result() : success(0) {
  }

  virtual ~DateiTransfer_checkoutPacketSize_result() throw() {}

  int32_t success;

  _DateiTransfer_checkoutPacketSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DateiTransfer_checkoutPacketSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_checkoutPacketSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_checkoutPacketSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_checkoutPacketSize_presult__isset {
  _DateiTransfer_checkoutPacketSize_presult__isset() : success(false) {}
  bool success;
} _DateiTransfer_checkoutPacketSize_presult__isset;

class DateiTransfer_checkoutPacketSize_presult {
 public:


  virtual ~DateiTransfer_checkoutPacketSize_presult() throw() {}

  int32_t* success;

  _DateiTransfer_checkoutPacketSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DateiTransfer_sendPacket_args__isset {
  _DateiTransfer_sendPacket_args__isset() : verbindungsid(false), paket(false), neuedateiposition(false) {}
  bool verbindungsid;
  bool paket;
  bool neuedateiposition;
} _DateiTransfer_sendPacket_args__isset;

class DateiTransfer_sendPacket_args {
 public:

  DateiTransfer_sendPacket_args() : verbindungsid(0), neuedateiposition(0) {
  }

  virtual ~DateiTransfer_sendPacket_args() throw() {}

  int32_t verbindungsid;
  std::vector<int8_t>  paket;
  int64_t neuedateiposition;

  _DateiTransfer_sendPacket_args__isset __isset;

  void __set_verbindungsid(const int32_t val) {
    verbindungsid = val;
  }

  void __set_paket(const std::vector<int8_t> & val) {
    paket = val;
  }

  void __set_neuedateiposition(const int64_t val) {
    neuedateiposition = val;
  }

  bool operator == (const DateiTransfer_sendPacket_args & rhs) const
  {
    if (!(verbindungsid == rhs.verbindungsid))
      return false;
    if (!(paket == rhs.paket))
      return false;
    if (!(neuedateiposition == rhs.neuedateiposition))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_sendPacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_sendPacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DateiTransfer_sendPacket_pargs {
 public:


  virtual ~DateiTransfer_sendPacket_pargs() throw() {}

  const int32_t* verbindungsid;
  const std::vector<int8_t> * paket;
  const int64_t* neuedateiposition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_sendPacket_result__isset {
  _DateiTransfer_sendPacket_result__isset() : success(false) {}
  bool success;
} _DateiTransfer_sendPacket_result__isset;

class DateiTransfer_sendPacket_result {
 public:

  DateiTransfer_sendPacket_result() : success(0) {
  }

  virtual ~DateiTransfer_sendPacket_result() throw() {}

  int64_t success;

  _DateiTransfer_sendPacket_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const DateiTransfer_sendPacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_sendPacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_sendPacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_sendPacket_presult__isset {
  _DateiTransfer_sendPacket_presult__isset() : success(false) {}
  bool success;
} _DateiTransfer_sendPacket_presult__isset;

class DateiTransfer_sendPacket_presult {
 public:


  virtual ~DateiTransfer_sendPacket_presult() throw() {}

  int64_t* success;

  _DateiTransfer_sendPacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DateiTransfer_receivePacket_args__isset {
  _DateiTransfer_receivePacket_args__isset() : verbindungsid(false), dateiposition(false) {}
  bool verbindungsid;
  bool dateiposition;
} _DateiTransfer_receivePacket_args__isset;

class DateiTransfer_receivePacket_args {
 public:

  DateiTransfer_receivePacket_args() : verbindungsid(0), dateiposition(0) {
  }

  virtual ~DateiTransfer_receivePacket_args() throw() {}

  int32_t verbindungsid;
  int64_t dateiposition;

  _DateiTransfer_receivePacket_args__isset __isset;

  void __set_verbindungsid(const int32_t val) {
    verbindungsid = val;
  }

  void __set_dateiposition(const int64_t val) {
    dateiposition = val;
  }

  bool operator == (const DateiTransfer_receivePacket_args & rhs) const
  {
    if (!(verbindungsid == rhs.verbindungsid))
      return false;
    if (!(dateiposition == rhs.dateiposition))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_receivePacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_receivePacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DateiTransfer_receivePacket_pargs {
 public:


  virtual ~DateiTransfer_receivePacket_pargs() throw() {}

  const int32_t* verbindungsid;
  const int64_t* dateiposition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_receivePacket_result__isset {
  _DateiTransfer_receivePacket_result__isset() : success(false) {}
  bool success;
} _DateiTransfer_receivePacket_result__isset;

class DateiTransfer_receivePacket_result {
 public:

  DateiTransfer_receivePacket_result() {
  }

  virtual ~DateiTransfer_receivePacket_result() throw() {}

  datenSenden success;

  _DateiTransfer_receivePacket_result__isset __isset;

  void __set_success(const datenSenden& val) {
    success = val;
  }

  bool operator == (const DateiTransfer_receivePacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DateiTransfer_receivePacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateiTransfer_receivePacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DateiTransfer_receivePacket_presult__isset {
  _DateiTransfer_receivePacket_presult__isset() : success(false) {}
  bool success;
} _DateiTransfer_receivePacket_presult__isset;

class DateiTransfer_receivePacket_presult {
 public:


  virtual ~DateiTransfer_receivePacket_presult() throw() {}

  datenSenden* success;

  _DateiTransfer_receivePacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DateiTransferClient : virtual public DateiTransferIf {
 public:
  DateiTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DateiTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initUpload(initUploadReturn& _return, const std::string& dateiname, const int64_t dateigroese);
  void send_initUpload(const std::string& dateiname, const int64_t dateigroese);
  void recv_initUpload(initUploadReturn& _return);
  void initDownload(initDownloadReturn& _return, const std::string& dateiname);
  void send_initDownload(const std::string& dateiname);
  void recv_initDownload(initDownloadReturn& _return);
  int32_t checkoutPacketSize(const int32_t verbindungsid, const int32_t paketgroese);
  void send_checkoutPacketSize(const int32_t verbindungsid, const int32_t paketgroese);
  int32_t recv_checkoutPacketSize();
  int64_t sendPacket(const int32_t verbindungsid, const std::vector<int8_t> & paket, const int64_t neuedateiposition);
  void send_sendPacket(const int32_t verbindungsid, const std::vector<int8_t> & paket, const int64_t neuedateiposition);
  int64_t recv_sendPacket();
  void receivePacket(datenSenden& _return, const int32_t verbindungsid, const int64_t dateiposition);
  void send_receivePacket(const int32_t verbindungsid, const int64_t dateiposition);
  void recv_receivePacket(datenSenden& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DateiTransferProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DateiTransferIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DateiTransferProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_initDownload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkoutPacketSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendPacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receivePacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DateiTransferProcessor(boost::shared_ptr<DateiTransferIf> iface) :
    iface_(iface) {
    processMap_["initUpload"] = &DateiTransferProcessor::process_initUpload;
    processMap_["initDownload"] = &DateiTransferProcessor::process_initDownload;
    processMap_["checkoutPacketSize"] = &DateiTransferProcessor::process_checkoutPacketSize;
    processMap_["sendPacket"] = &DateiTransferProcessor::process_sendPacket;
    processMap_["receivePacket"] = &DateiTransferProcessor::process_receivePacket;
  }

  virtual ~DateiTransferProcessor() {}
};

class DateiTransferProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DateiTransferProcessorFactory(const ::boost::shared_ptr< DateiTransferIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DateiTransferIfFactory > handlerFactory_;
};

class DateiTransferMultiface : virtual public DateiTransferIf {
 public:
  DateiTransferMultiface(std::vector<boost::shared_ptr<DateiTransferIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DateiTransferMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DateiTransferIf> > ifaces_;
  DateiTransferMultiface() {}
  void add(boost::shared_ptr<DateiTransferIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initUpload(initUploadReturn& _return, const std::string& dateiname, const int64_t dateigroese) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initUpload(_return, dateiname, dateigroese);
    }
    ifaces_[i]->initUpload(_return, dateiname, dateigroese);
    return;
  }

  void initDownload(initDownloadReturn& _return, const std::string& dateiname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initDownload(_return, dateiname);
    }
    ifaces_[i]->initDownload(_return, dateiname);
    return;
  }

  int32_t checkoutPacketSize(const int32_t verbindungsid, const int32_t paketgroese) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkoutPacketSize(verbindungsid, paketgroese);
    }
    return ifaces_[i]->checkoutPacketSize(verbindungsid, paketgroese);
  }

  int64_t sendPacket(const int32_t verbindungsid, const std::vector<int8_t> & paket, const int64_t neuedateiposition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPacket(verbindungsid, paket, neuedateiposition);
    }
    return ifaces_[i]->sendPacket(verbindungsid, paket, neuedateiposition);
  }

  void receivePacket(datenSenden& _return, const int32_t verbindungsid, const int64_t dateiposition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receivePacket(_return, verbindungsid, dateiposition);
    }
    ifaces_[i]->receivePacket(_return, verbindungsid, dateiposition);
    return;
  }

};



#endif
